From a9c200bf5417ca6c6fa30a5210548b38601e07b7 Mon Sep 17 00:00:00 2001
From: "Zoey.Li" <zoey.li@nxp.com>
Date: Thu, 3 Aug 2023 17:31:27 +0900
Subject: [PATCH 1/3] imx93: add support for raw format cameras based on
 L6.1.1-1.0.0

With this patch, isi output format is always the same as input camera format.
Currently can support YUV422 and RAW8/10/12 formats.

Signed-off-by: Zoey.Li <zoey.li@nxp.com>
---
 drivers/staging/media/imx/dwc-mipi-csi2.c | 75 +++++++++++++++++++++--
 drivers/staging/media/imx/imx8-isi-cap.c  |  5 +-
 drivers/staging/media/imx/imx8-isi-fmt.c  | 29 ++++++++-
 drivers/staging/media/imx/imx8-isi-hw.c   |  2 +-
 4 files changed, 104 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/media/imx/dwc-mipi-csi2.c b/drivers/staging/media/imx/dwc-mipi-csi2.c
index 8a24b0231596..0c7ae3895e7c 100644
--- a/drivers/staging/media/imx/dwc-mipi-csi2.c
+++ b/drivers/staging/media/imx/dwc-mipi-csi2.c
@@ -385,7 +385,10 @@ struct dwc_mipi_csi2_host {
 static const struct csi2h_pix_format dwc_csi2h_formats[] = {
 	{
 		.code = MEDIA_BUS_FMT_YUYV8_2X8,
-		.fmt_reg = 0x18,
+		.fmt_reg = 0x1E,
+	}, {
+		.code = MEDIA_BUS_FMT_UYVY8_2X8,
+		.fmt_reg = 0x1E,
 	}, {
 		.code = MEDIA_BUS_FMT_RGB888_1X24,
 		.fmt_reg = 0x24,
@@ -395,12 +398,39 @@ static const struct csi2h_pix_format dwc_csi2h_formats[] = {
 	}, {
 		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
 		.fmt_reg = 0x2A,
+	}, {
+		.code = MEDIA_BUS_FMT_SGBRG8_1X8,
+		.fmt_reg = 0x2A,
+	}, {
+		.code = MEDIA_BUS_FMT_SGRBG8_1X8,
+		.fmt_reg = 0x2A,
+	}, {
+		.code = MEDIA_BUS_FMT_SRGGB8_1X8,
+		.fmt_reg = 0x2A,
 	}, {
 		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
 		.fmt_reg = 0x2B,
+	}, {
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.fmt_reg = 0x2B,
+	}, {
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.fmt_reg = 0x2B,
+	}, {
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.fmt_reg = 0x2B,
 	}, {
 		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
 		.fmt_reg = 0x2C,
+	}, {
+		.code = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.fmt_reg = 0x2C,
+	}, {
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.fmt_reg = 0x2C,
+	}, {
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.fmt_reg = 0x2C,
 	}, {
 		/* sentinel */
 	}
@@ -702,6 +732,9 @@ static void disp_mix_gasket_config(struct dwc_mipi_csi2_host *csi2h)
 		fmt_val = DT_YUV422_8;
 		break;
 	case MEDIA_BUS_FMT_SBGGR8_1X8:
+	case MEDIA_BUS_FMT_SGBRG8_1X8:
+	case MEDIA_BUS_FMT_SGRBG8_1X8:
+	case MEDIA_BUS_FMT_SRGGB8_1X8:
 		fmt_val = DT_RAW8;
 		break;
 	case MEDIA_BUS_FMT_SBGGR10_1X10:
@@ -720,6 +753,7 @@ static void disp_mix_gasket_config(struct dwc_mipi_csi2_host *csi2h)
 		pr_err("gasket not support format %d\n", mf->code);
 		return;
 	}
+	pr_info("code: 0x%x, camera_mux fmt: 0x%x\n", mf->code, fmt_val);
 
 	if (csi2h->ppi_pg_enable)
 		fmt_val = DT_RGB888;
@@ -851,7 +885,7 @@ static int dwc_mipi_csi2_host_ipi_config(struct dwc_mipi_csi2_host *csi2h)
 		val &= ~DWC_MIPI_CSI2_IPI_VCID_VC_2;
 	dwc_mipi_csi2h_write(csi2h, DWC_MIPI_CSI2_IPI_VCID, val);
 
-	dev_dbg(dev, "data_type:0x%x, virtual chan: %d\n",
+	dev_info(dev, "ipi data_type:0x%x, virtual chan: %d\n",
 		ipi_cfg->data_type, ipi_cfg->vir_chan);
 
 	/* 1. Select the IPI mode, camera timing by default
@@ -880,7 +914,7 @@ static int dwc_mipi_csi2_host_ipi_config(struct dwc_mipi_csi2_host *csi2h)
 	if (ipi_cfg->controller_mode || csi2h->ppi_pg_enable)
 		dwc_mipi_csi2_ipi_config_vtiming(csi2h);
 
-	dev_dbg(dev, "ipi mode: %s, color_mode: %s\n",
+	dev_info(dev, "ipi mode: %s, color_mode: %s\n",
 		ipi_cfg->controller_mode ? "controller" : "camera",
 		ipi_cfg->color_mode_16   ? "color mode 16" : "color mode 48");
 
@@ -1045,7 +1079,7 @@ static int dwc_mipi_csi2_param_init(struct dwc_mipi_csi2_host *csi2h)
 	of_property_read_u32(node, "cfg-clk-range", &csi2h->cfgclkfreqrange);
 	of_property_read_u32(node, "hs-clk-range", &csi2h->hsclkfreqrange);
 
-	dev_dbg(dev, "cfgclkfreqrange=%d, hsfreqrange=%d\n",
+	dev_info(dev, "cfgclkfreqrange=%d, hsfreqrange=%d\n",
 		 csi2h->cfgclkfreqrange, csi2h->hsclkfreqrange);
 	return 0;
 }
@@ -1110,6 +1144,39 @@ static int dwc_mipi_csi2_get_fmt(struct v4l2_subdev *sd,
 	}
 
 	memcpy(mf, &format->format, sizeof(struct v4l2_mbus_framefmt));
+
+	switch (mf->code) {
+	case MEDIA_BUS_FMT_YUYV8_2X8:
+	case MEDIA_BUS_FMT_UYVY8_2X8:
+		csi2h->ipi_cfg[0].data_type = DT_YUV422_8;
+		csi2h->ipi_cfg[0].color_mode_16 = 0;
+		break;
+	case MEDIA_BUS_FMT_SBGGR8_1X8:
+	case MEDIA_BUS_FMT_SGBRG8_1X8:
+	case MEDIA_BUS_FMT_SGRBG8_1X8:
+	case MEDIA_BUS_FMT_SRGGB8_1X8:
+		csi2h->ipi_cfg[0].data_type = DT_RAW8;
+		csi2h->ipi_cfg[0].color_mode_16 = 1;
+		break;
+	case MEDIA_BUS_FMT_SBGGR10_1X10:
+	case MEDIA_BUS_FMT_SGBRG10_1X10:
+	case MEDIA_BUS_FMT_SGRBG10_1X10:
+	case MEDIA_BUS_FMT_SRGGB10_1X10:
+		csi2h->ipi_cfg[0].data_type = DT_RAW10;
+		csi2h->ipi_cfg[0].color_mode_16 = 1;
+		break;
+	case MEDIA_BUS_FMT_SBGGR12_1X12:
+	case MEDIA_BUS_FMT_SGBRG12_1X12:
+	case MEDIA_BUS_FMT_SGRBG12_1X12:
+	case MEDIA_BUS_FMT_SRGGB12_1X12:
+		csi2h->ipi_cfg[0].data_type = DT_RAW12;
+		csi2h->ipi_cfg[0].color_mode_16 = 1;
+		break;
+	default:
+                pr_err("not support format %d\n", mf->code);
+	}
+	pr_info("code: 0x%x, csi fmt: 0x%x\n", mf->code, csi2h->ipi_cfg[0].data_type);
+
 	return 0;
 }
 
diff --git a/drivers/staging/media/imx/imx8-isi-cap.c b/drivers/staging/media/imx/imx8-isi-cap.c
index 0db2a3a8c398..748955650990 100644
--- a/drivers/staging/media/imx/imx8-isi-cap.c
+++ b/drivers/staging/media/imx/imx8-isi-cap.c
@@ -958,7 +958,9 @@ static int mxc_isi_source_fmt_init(struct mxc_isi_cap_dev *isi_cap)
 
 	src_fmt.pad = source_pad->index;
 	src_fmt.which = V4L2_SUBDEV_FORMAT_ACTIVE;
-	src_fmt.format.code = MEDIA_BUS_FMT_UYVY8_1X16;
+	//src_fmt.format.code = MEDIA_BUS_FMT_UYVY8_1X16;
+	src_fmt.format.code = dst_f->fmt->mbus_code;
+	pr_info("%s, set isi src fmt to 0x%x\n", __func__, dst_f->fmt->mbus_code);
 	src_fmt.format.width = dst_f->width;
 	src_fmt.format.height = dst_f->height;
 	ret = v4l2_subdev_call(src_sd, pad, set_fmt, NULL, &src_fmt);
@@ -975,6 +977,7 @@ static int mxc_isi_source_fmt_init(struct mxc_isi_cap_dev *isi_cap)
 		v4l2_err(&isi_cap->sd, "get remote fmt fail!\n");
 		return ret;
 	}
+	pr_info("%s, get isi src fmt = 0x%x\n", __func__, src_fmt.format.code);
 
 	/* Pixel link master will transfer format to RGB32 or YUV32 */
 	src_f->fmt = mxc_isi_get_src_fmt(&src_fmt);
diff --git a/drivers/staging/media/imx/imx8-isi-fmt.c b/drivers/staging/media/imx/imx8-isi-fmt.c
index db11c809a3d3..93ee37f536cf 100644
--- a/drivers/staging/media/imx/imx8-isi-fmt.c
+++ b/drivers/staging/media/imx/imx8-isi-fmt.c
@@ -42,7 +42,7 @@ struct mxc_isi_fmt mxc_isi_out_formats[] = {
 		.memplanes	= 1,
 		.colplanes	= 1,
 		.align		= 3,
-		.mbus_code	= MEDIA_BUS_FMT_YUYV8_1X16,
+		.mbus_code	= /*MEDIA_BUS_FMT_YUYV8_1X16*/MEDIA_BUS_FMT_UYVY8_2X8,
 	}, {
 		.name		= "YUV32 (X-Y-U-V)",
 		.fourcc		= V4L2_PIX_FMT_YUV32,
@@ -97,6 +97,33 @@ struct mxc_isi_fmt mxc_isi_out_formats[] = {
 		.colplanes	= 1,
 		.align		= 2,
 		.mbus_code	= MEDIA_BUS_FMT_RGB888_1X24,
+	}, {
+		.name           = "RAW8 (SGRBG8)",
+		.fourcc         = V4L2_PIX_FMT_SGRBG8,
+		.depth          = { 8 },
+		.color          = MXC_ISI_OUT_FMT_RAW8,
+		.memplanes      = 1,
+		.colplanes      = 1,
+		.align          = 1,
+		.mbus_code      = MEDIA_BUS_FMT_SGRBG8_1X8,
+	}, {
+		.name		= "RAW10 (SGRBG10)",
+		.fourcc		= V4L2_PIX_FMT_SGRBG10,
+		.depth		= { 16 },
+		.color		= MXC_ISI_OUT_FMT_RAW16,
+		.memplanes	= 1,
+		.colplanes	= 1,
+		.align		= 2,
+		.mbus_code	= MEDIA_BUS_FMT_SGRBG10_1X10,
+	}, {
+		.name		= "RAW12 (SGRBG12)",
+		.fourcc		= V4L2_PIX_FMT_SGRBG12,
+		.depth		= { 16 },
+		.color		= MXC_ISI_OUT_FMT_RAW16,
+		.memplanes	= 1,
+		.colplanes	= 1,
+		.align		= 2,
+		.mbus_code	= MEDIA_BUS_FMT_SGRBG12_1X12,
 	}
 };
 
diff --git a/drivers/staging/media/imx/imx8-isi-hw.c b/drivers/staging/media/imx/imx8-isi-hw.c
index eac3bcf85da3..20e53de3c1b7 100644
--- a/drivers/staging/media/imx/imx8-isi-hw.c
+++ b/drivers/staging/media/imx/imx8-isi-hw.c
@@ -336,7 +336,7 @@ void mxc_isi_channel_set_csc(struct mxc_isi_dev *mxc_isi,
 
 	/* set outbuf format */
 	val |= dst_fmt->color << CHNL_IMG_CTRL_FORMAT_OFFSET;
-
+	pr_info("%s, isi fmt: 0x%x\n", __func__, dst_fmt->color);
 	mxc_isi->cscen = 1;
 
 	if (is_yuv(src_fmt->fourcc) && is_rgb(dst_fmt->fourcc)) {
-- 
2.34.1

