Index: linux-tx93/drivers/clk/imx/clk-fracn-gppll.c
===================================================================
--- linux-tx93.orig/drivers/clk/imx/clk-fracn-gppll.c
+++ linux-tx93/drivers/clk/imx/clk-fracn-gppll.c
@@ -70,9 +70,15 @@ struct clk_fracn_gppll {
 
 /*
  * Fvco = Fref * (MFI + MFN / MFD)
+ * Fvco = Fref * MFI + Fref * MFN / MFD
+ * Fref * MFN / MFD = Fvco - Fref * MFI
+ * MFN / MFD = Fvco / Fref - MFI
+ * MFN = Fvco / Fref - MFI * MFD
  * Fout = Fvco / (rdiv * odiv)
+ * Fvco = Fout * rdiv * odiv
  */
 static const struct imx_fracn_gppll_rate_table fracn_tbl[] = {
+#if 1
 	PLL_FRACN_GP(1700000000U, 141, 0, 0, 1, 2),
 	PLL_FRACN_GP(1400000000U, 175, 0, 0, 1, 3),
 	PLL_FRACN_GP(900000000U, 150, 0, 0, 1, 4),
@@ -83,8 +89,9 @@ static const struct imx_fracn_gppll_rate
 	PLL_FRACN_GP(484000000U, 121, 0, 1, 0, 6),
 	PLL_FRACN_GP(445333333U, 167, 0, 1, 0, 9),
 	PLL_FRACN_GP(400000000U, 200, 0, 1, 0, 12),
-	PLL_FRACN_GP(393216000U, 163, 84, 100, 0, 10),
+	//PLL_FRACN_GP(393216000U, 163, 84, 100, 0, 10),
 	PLL_FRACN_GP(300000000U, 150, 0, 1, 0, 12)
+#endif
 };
 
 struct imx_fracn_gppll_clk imx_fracn_gppll = {
@@ -134,6 +141,10 @@ static inline unsigned long imx_fracn_ca
 		return 0;
 	p->fvco = div64_ul(fvco, (unsigned long)p->mfd);
 	rate = div64_ul(p->fvco, p->odiv * p->rdiv);
+printk("%s@%d: mfi=%u mfn=%u mfd=%lu rdiv=%lu odiv=%lu fvco=%llu rate=%lu\n",
+       __func__, __LINE__, p->mfi, p->mfn, p->mfd, p->rdiv, p->odiv,
+       p->fvco, rate);
+//imx_fracn_calc_pll_rate@108: mfi=518 mfn=3776967835 mfd=999999 rdiv=1 odiv=26 fvco=0.000MHz rate=19
 	return rate;
 }
 
@@ -148,7 +159,10 @@ static int imx_fracn_calc_pll_settings(s
 	unsigned int best_rdiv;
 	unsigned int best_odiv = 0;
 
+printk("%s@%d: rate=%lu parent_rate=%lu\n", __func__, __LINE__, rate, parent_rate);
 	if (rate > FVCO_MAX || rate < parent_rate) {
+		printk("%s@%d: designated clock rate %lu out of range: %lu..%lu\n",
+		       __func__, __LINE__, rate, parent_rate, FVCO_MAX / (RDIV_MIN * ODIV_MIN));
 		return -ERANGE;
 	}
 	p.fref = parent_rate;
@@ -166,6 +180,8 @@ static int imx_fracn_calc_pll_settings(s
 				break;
 
 			freq = div64_ul(p.fref * p.mfi, p.rdiv * p.odiv);
+printk("%s@%d: mfi=%u rdiv=%lu odiv=%lu div=%lu freq=%llu err=%llu\n", __func__, __LINE__,
+       p.mfi, p.rdiv, p.odiv, p.rdiv * p.odiv, freq, abs(freq - rate));
 			if (WARN_ON(freq > rate))
 				continue;
 			err = rate - freq;
@@ -188,6 +204,9 @@ static int imx_fracn_calc_pll_settings(s
 	p.rdiv = best_rdiv;
 	p.mfi = best_mfi;
 
+printk("%s@%d: mfi=%u rdiv=%lu odiv=%lu div=%lu\n", __func__, __LINE__,
+       p.mfi, p.rdiv, p.odiv, p.rdiv * p.odiv);
+//imx_fracn_calc_pll_settings@147: mfi=518 odiv=26 div=26
 	fvco = (u64)rate * p.rdiv * p.odiv;
 	/*
 	 * MFN = Fvco / Fref - MFI * MFD <=> MFN = Fvco - MFI * MFD * Fref
@@ -196,6 +215,18 @@ static int imx_fracn_calc_pll_settings(s
 	p.mfn = fvco - p.mfi * p.fref;
 	if (WARN_ON(p.mfn < 0))
 		p.mfn = 0;
+	fvco = p.fref * p.mfi + p.mfn;
+printk("%s@%d: rdiv=%lu odiv=%lu fvco=%llu\n", __func__, __LINE__, p.rdiv, p.odiv, fvco);
+
+	{
+		unsigned long calc_rate = imx_fracn_calc_pll_rate(&p);
+
+printk("%s@%d: rate=%lu mfi=%u mfn=%u mfd=%lu fvco=%llu.%.06lluMHz => %lu.%06luMHz err=%lu\n",
+       __func__, __LINE__,
+       rate, p.mfi, p.mfn, p.mfd, p.fvco / 1000000, p.fvco % 1000000,
+       calc_rate / 1000000, calc_rate % 1000000, abs(rate - calc_rate));
+//imx_fracn_calc_pll_settings@163: rate=498000000 mfi=518 mfn=3776967835 mfd=999999 fvco=0.000MHz => 0.000MHz err=497999981
+	}
 	*pll_params = p;
 	return 0;
 }
@@ -232,6 +263,7 @@ static unsigned long clk_fracn_gppll_rec
 	unsigned long rate = 0;
 	int i;
 
+printk("%s@%d: clk=%s parent_rate=%lu\n", __func__, __LINE__, __clk_get_name(hw->clk), parent_rate);
 	pll_numerator = readl_relaxed(pll->base + PLL_NUMERATOR);
 	mfn = FIELD_GET(PLL_MFN_MASK, pll_numerator);
 
@@ -256,8 +288,13 @@ static unsigned long clk_fracn_gppll_rec
 		    rate_table[i].odiv == odiv)
 			rate = rate_table[i].rate;
 	}
+printk("%s@%d: rate from table=%lu\n", __func__, __LINE__, rate);
+	fvco = div64_ul(fvco * mfi * mfd + fvco * mfn, mfd);
+printk("%s@%d: mfi=%u mfn=%u mfd=%lu rdiv=%lu odiv=%lu fvco=%llu.%06llu MHz rate=%lu.%06lu MHz\n",
+       __func__, __LINE__, mfi, mfn, mfd, rdiv, odiv,
+       fvco / 1000000, fvco % 1000000, rate / 1000000, rate % 1000000);
 
-	if (rate)
+	if (0*rate)
 		return rate;
 
 	if (!mfd)
@@ -278,10 +315,13 @@ static unsigned long clk_fracn_gppll_rec
 	}
 
 	/* Fvco = Fref * (MFI + MFN / MFD) */
+	fvco = parent_rate;
 	fvco = fvco * mfi * mfd + fvco * mfn;
-	do_div(fvco, mfd * rdiv * odiv);
-
-	return (unsigned long)fvco;
+	rate = div64_ul(fvco, mfd * rdiv * odiv);
+printk("%s@%d: mfi=%u mfn=%u mfd=%lu rdiv=%lu odiv=%lu fvco=%llu.%06llu MHz rate=%lu.%06lu MHz\n",
+       __func__, __LINE__, mfi, mfn, mfd, rdiv, odiv,
+       fvco / 1000000, fvco % 1000000, rate / 1000000, rate % 1000000);
+	return rate;
 }
 
 static int clk_fracn_gppll_wait_lock(struct clk_fracn_gppll *pll)
@@ -301,8 +341,13 @@ static int clk_fracn_gppll_set_rate(stru
 	u32 tmp, pll_div, ana_mfn;
 	int ret;
 
+printk("%s@%d: clk=%s drate=%lu prate=%lu\n", __func__, __LINE__,
+       __clk_get_name(hw->clk), drate, prate);
 	rate_table = imx_get_pll_settings(pll, drate);
 	if (rate_table) {
+printk("Using PLL settings from table entry for rate %lu: %u %u %u %u %u %u\n",
+       drate, rate_table->rate, rate_table->mfi, rate_table->mfn,
+       rate_table->mfd, rate_table->rdiv, rate_table->odiv);
 		pll_params.mfi = rate_table->mfi;
 		pll_params.mfn = rate_table->mfn;
 		pll_params.mfd = rate_table->mfd;
@@ -314,6 +359,9 @@ static int clk_fracn_gppll_set_rate(stru
 			return ret;
 	}
 
+printk("%s@%d: drate=%lu prate=%lu mfi=%u mfn=%u mfd=%lu rdiv=%lu odiv=%lu\n", __func__, __LINE__,
+       drate, prate, pll_params.mfi, pll_params.mfn, pll_params.mfd,
+       pll_params.rdiv, pll_params.odiv);
 	/* Disable output */
 	tmp = readl_relaxed(pll->base + PLL_CTRL);
 	tmp &= ~CLKMUX_EN;
