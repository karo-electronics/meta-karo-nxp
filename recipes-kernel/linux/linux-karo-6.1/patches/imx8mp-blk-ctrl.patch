diff --git a/drivers/soc/imx/imx8mp-blk-ctrl.c b/drivers/soc/imx/imx8mp-blk-ctrl.c
index 55adf2c47095..e6489d88fe9c 100644
--- a/drivers/soc/imx/imx8mp-blk-ctrl.c
+++ b/drivers/soc/imx/imx8mp-blk-ctrl.c
@@ -4,16 +4,18 @@
  * Copyright 2022 Pengutronix, Lucas Stach <kernel@pengutronix.de>
  */
 
+#include <linux/bitfield.h>
 #include <linux/clk.h>
+#include <linux/clk-provider.h>
 #include <linux/device.h>
-#include <linux/module.h>
 #include <linux/of_device.h>
+#include <linux/interconnect.h>
+#include <linux/module.h>
+#include <linux/of.h>
 #include <linux/platform_device.h>
 #include <linux/pm_domain.h>
 #include <linux/pm_runtime.h>
 #include <linux/regmap.h>
-#include <linux/mfd/syscon.h>
-#include <soc/imx/gpcv2.h>
 
 #include <dt-bindings/power/imx8mp-power.h>
 
@@ -22,6 +24,15 @@
 #define  USB_CLOCK_MODULE_EN	BIT(1)
 #define  PCIE_PHY_APB_RST	BIT(4)
 #define  PCIE_PHY_INIT_RST	BIT(5)
+#define GPR_REG1		0x4
+#define  PLL_LOCK		BIT(13)
+#define GPR_REG2		0x8
+#define  P_PLL_MASK		GENMASK(5, 0)
+#define  M_PLL_MASK		GENMASK(15, 6)
+#define  S_PLL_MASK		GENMASK(18, 16)
+#define GPR_REG3		0xc
+#define  PLL_CKE		BIT(17)
+#define  PLL_RST		BIT(31)
 
 struct imx8mp_blk_ctrl_domain;
 
@@ -30,50 +41,38 @@ struct imx8mp_blk_ctrl {
 	struct notifier_block power_nb;
 	struct device *bus_power_dev;
 	struct regmap *regmap;
-	struct regmap *noc_regmap;
 	struct imx8mp_blk_ctrl_domain *domains;
 	struct genpd_onecell_data onecell_data;
 	void (*power_off) (struct imx8mp_blk_ctrl *bc, struct imx8mp_blk_ctrl_domain *domain);
 	void (*power_on) (struct imx8mp_blk_ctrl *bc, struct imx8mp_blk_ctrl_domain *domain);
 };
 
-struct imx8m_blk_ctrl_hurry_data {
-	u32 off;
-	u32 hurry_mask;
-};
-
-struct imx8mp_blk_ctrl_noc_data {
-	u32 off;
-	u32 priority;
-	u32 mode;
-	u32 extctrl;
-};
-
-#define DOMAIN_MAX_NOC	3
-
 struct imx8mp_blk_ctrl_domain_data {
 	const char *name;
 	const char * const *clk_names;
 	int num_clks;
+	const char * const *path_names;
+	int num_paths;
 	const char *gpc_name;
-	const struct imx8m_blk_ctrl_hurry_data *hurry_data;
-	const struct imx8mp_blk_ctrl_noc_data *noc_data[DOMAIN_MAX_NOC];
-	const unsigned int flags;
 };
 
-#define DOMAIN_MAX_CLKS 3
+#define DOMAIN_MAX_CLKS 2
+#define DOMAIN_MAX_PATHS 3
 
 struct imx8mp_blk_ctrl_domain {
 	struct generic_pm_domain genpd;
 	const struct imx8mp_blk_ctrl_domain_data *data;
 	struct clk_bulk_data clks[DOMAIN_MAX_CLKS];
+	struct icc_bulk_data paths[DOMAIN_MAX_PATHS];
 	struct device *power_dev;
 	struct imx8mp_blk_ctrl *bc;
+	int num_paths;
 	int id;
 };
 
 struct imx8mp_blk_ctrl_data {
 	int max_reg;
+	int (*probe) (struct imx8mp_blk_ctrl *bc);
 	notifier_fn_t power_notifier_fn;
 	void (*power_off) (struct imx8mp_blk_ctrl *bc, struct imx8mp_blk_ctrl_domain *domain);
 	void (*power_on) (struct imx8mp_blk_ctrl *bc, struct imx8mp_blk_ctrl_domain *domain);
@@ -87,31 +86,90 @@ to_imx8mp_blk_ctrl_domain(struct generic_pm_domain *genpd)
 	return container_of(genpd, struct imx8mp_blk_ctrl_domain, genpd);
 }
 
-static int imx8mp_qos_set(struct imx8mp_blk_ctrl_domain *domain)
+struct clk_hsio_pll {
+	struct clk_hw	hw;
+	struct regmap *regmap;
+};
+
+static inline struct clk_hsio_pll *to_clk_hsio_pll(struct clk_hw *hw)
 {
-	const struct imx8mp_blk_ctrl_domain_data *data = domain->data;
-	struct imx8mp_blk_ctrl *bc = domain->bc;
-	struct regmap *regmap = bc->noc_regmap;
-	int i;
+	return container_of(hw, struct clk_hsio_pll, hw);
+}
 
-	if (!data)
-		return 0;
+static int clk_hsio_pll_prepare(struct clk_hw *hw)
+{
+	struct clk_hsio_pll *clk = to_clk_hsio_pll(hw);
+	u32 val;
 
-	if (data->hurry_data)
-		regmap_set_bits(bc->regmap, data->hurry_data->off, data->hurry_data->hurry_mask);
+	/* set the PLL configuration */
+	regmap_update_bits(clk->regmap, GPR_REG2,
+			   P_PLL_MASK | M_PLL_MASK | S_PLL_MASK,
+			   FIELD_PREP(P_PLL_MASK, 12) |
+			   FIELD_PREP(M_PLL_MASK, 800) |
+			   FIELD_PREP(S_PLL_MASK, 4));
 
-	if (!regmap)
-		return 0;
+	/* de-assert PLL reset */
+	regmap_update_bits(clk->regmap, GPR_REG3, PLL_RST, PLL_RST);
 
-	for (i = 0; i < DOMAIN_MAX_NOC; i++) {
-		if (!data->noc_data[i])
-			continue;
-		regmap_write(regmap, data->noc_data[i]->off + 0x8, data->noc_data[i]->priority);
-		regmap_write(regmap, data->noc_data[i]->off + 0xc, data->noc_data[i]->mode);
-		regmap_write(regmap, data->noc_data[i]->off + 0x18, data->noc_data[i]->extctrl);
-	}
+	/* enable PLL */
+	regmap_update_bits(clk->regmap, GPR_REG3, PLL_CKE, PLL_CKE);
 
-	return 0;
+	return regmap_read_poll_timeout(clk->regmap, GPR_REG1, val,
+					val & PLL_LOCK, 10, 100);
+}
+
+static void clk_hsio_pll_unprepare(struct clk_hw *hw)
+{
+	struct clk_hsio_pll *clk = to_clk_hsio_pll(hw);
+
+	regmap_update_bits(clk->regmap, GPR_REG3, PLL_RST | PLL_CKE, 0);
+}
+
+static int clk_hsio_pll_is_prepared(struct clk_hw *hw)
+{
+	struct clk_hsio_pll *clk = to_clk_hsio_pll(hw);
+
+	return regmap_test_bits(clk->regmap, GPR_REG1, PLL_LOCK);
+}
+
+static unsigned long clk_hsio_pll_recalc_rate(struct clk_hw *hw,
+					      unsigned long parent_rate)
+{
+	return 100000000;
+}
+
+static const struct clk_ops clk_hsio_pll_ops = {
+	.prepare = clk_hsio_pll_prepare,
+	.unprepare = clk_hsio_pll_unprepare,
+	.is_prepared = clk_hsio_pll_is_prepared,
+	.recalc_rate = clk_hsio_pll_recalc_rate,
+};
+
+static int imx8mp_hsio_blk_ctrl_probe(struct imx8mp_blk_ctrl *bc)
+{
+	struct clk_hsio_pll *clk_hsio_pll;
+	struct clk_hw *hw;
+	struct clk_init_data init = {};
+	int ret;
+
+	clk_hsio_pll = devm_kzalloc(bc->dev, sizeof(*clk_hsio_pll), GFP_KERNEL);
+	if (!clk_hsio_pll)
+		return -ENOMEM;
+
+	init.name = "hsio_pll";
+	init.ops = &clk_hsio_pll_ops;
+	init.parent_names = (const char *[]){"osc_24m"};
+	init.num_parents = 1;
+
+	clk_hsio_pll->regmap = bc->regmap;
+	clk_hsio_pll->hw.init = &init;
+
+	hw = &clk_hsio_pll->hw;
+	ret = devm_clk_hw_register(bc->bus_power_dev, hw);
+	if (ret)
+		return ret;
+
+	return devm_of_clk_add_hw_provider(bc->dev, of_clk_hw_simple_get, hw);
 }
 
 static void imx8mp_hsio_blk_ctrl_power_on(struct imx8mp_blk_ctrl *bc,
@@ -131,8 +189,6 @@ static void imx8mp_hsio_blk_ctrl_power_on(struct imx8mp_blk_ctrl *bc,
 	default:
 		break;
 	}
-
-	imx8mp_qos_set(domain);
 }
 
 static void imx8mp_hsio_blk_ctrl_power_off(struct imx8mp_blk_ctrl *bc,
@@ -197,60 +253,30 @@ static int imx8mp_hsio_power_notifier(struct notifier_block *nb,
 	return NOTIFY_OK;
 }
 
-#define IMX8MP_HSIOBLK_NOC_PCIE	0
-#define IMX8MP_HSIOBLK_USB1	1
-#define IMX8MP_HSIOBLK_USB2	2
-#define IMX8MP_HSIOBLK_PCIE	3
-
-static const struct imx8mp_blk_ctrl_noc_data imx8mp_hsio_noc_data[] = {
-	[IMX8MP_HSIOBLK_NOC_PCIE] = {
-		.off = 0x780,
-		.priority = 0x80000303,
-	},
-	[IMX8MP_HSIOBLK_USB1] = {
-		.off = 0x800,
-		.priority = 0x80000303,
-	},
-	[IMX8MP_HSIOBLK_USB2] = {
-		.off = 0x880,
-		.priority = 0x80000303,
-	},
-	[IMX8MP_HSIOBLK_PCIE] = {
-		.off = 0x900,
-		.priority = 0x80000303,
-	},
-};
-
 static const struct imx8mp_blk_ctrl_domain_data imx8mp_hsio_domain_data[] = {
 	[IMX8MP_HSIOBLK_PD_USB] = {
 		.name = "hsioblk-usb",
 		.clk_names = (const char *[]){ "usb" },
 		.num_clks = 1,
 		.gpc_name = "usb",
-		.noc_data = {
-			&imx8mp_hsio_noc_data[IMX8MP_HSIOBLK_USB1],
-			&imx8mp_hsio_noc_data[IMX8MP_HSIOBLK_USB2]
-		},
+		.path_names = (const char *[]){"usb1", "usb2"},
+		.num_paths = 2,
 	},
 	[IMX8MP_HSIOBLK_PD_USB_PHY1] = {
 		.name = "hsioblk-usb-phy1",
 		.gpc_name = "usb-phy1",
-		.flags = GENPD_FLAG_ACTIVE_WAKEUP,
 	},
 	[IMX8MP_HSIOBLK_PD_USB_PHY2] = {
 		.name = "hsioblk-usb-phy2",
 		.gpc_name = "usb-phy2",
-		.flags = GENPD_FLAG_ACTIVE_WAKEUP,
 	},
 	[IMX8MP_HSIOBLK_PD_PCIE] = {
 		.name = "hsioblk-pcie",
 		.clk_names = (const char *[]){ "pcie" },
 		.num_clks = 1,
 		.gpc_name = "pcie",
-		.noc_data = {
-			&imx8mp_hsio_noc_data[IMX8MP_HSIOBLK_NOC_PCIE],
-			&imx8mp_hsio_noc_data[IMX8MP_HSIOBLK_PCIE]
-		},
+		.path_names = (const char *[]){"noc-pcie", "pcie"},
+		.num_paths = 2,
 	},
 	[IMX8MP_HSIOBLK_PD_PCIE_PHY] = {
 		.name = "hsioblk-pcie-phy",
@@ -260,6 +286,7 @@ static const struct imx8mp_blk_ctrl_domain_data imx8mp_hsio_domain_data[] = {
 
 static const struct imx8mp_blk_ctrl_data imx8mp_hsio_blk_ctl_dev_data = {
 	.max_reg = 0x24,
+	.probe = imx8mp_hsio_blk_ctrl_probe,
 	.power_on = imx8mp_hsio_blk_ctrl_power_on,
 	.power_off = imx8mp_hsio_blk_ctrl_power_off,
 	.power_notifier_fn = imx8mp_hsio_power_notifier,
@@ -274,6 +301,7 @@ static const struct imx8mp_blk_ctrl_data imx8mp_hsio_blk_ctl_dev_data = {
 #define HDMI_RTX_CLK_CTL3	0x70
 #define HDMI_RTX_CLK_CTL4	0x80
 #define HDMI_TX_CONTROL0	0x200
+#define  HDMI_LCDIF_NOC_HURRY_MASK		GENMASK(14, 12)
 
 static void imx8mp_hdmi_blk_ctrl_power_on(struct imx8mp_blk_ctrl *bc,
 					  struct imx8mp_blk_ctrl_domain *domain)
@@ -290,15 +318,17 @@ static void imx8mp_hdmi_blk_ctrl_power_on(struct imx8mp_blk_ctrl *bc,
 		regmap_set_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(11));
 		regmap_set_bits(bc->regmap, HDMI_RTX_RESET_CTL0,
 				BIT(4) | BIT(5) | BIT(6));
+		regmap_set_bits(bc->regmap, HDMI_TX_CONTROL0,
+				FIELD_PREP(HDMI_LCDIF_NOC_HURRY_MASK, 7));
 		break;
-	case IMX8MP_HDMIBLK_PD_PVI:
-		regmap_set_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(28));
-		regmap_set_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(22));
-		fallthrough;
 	case IMX8MP_HDMIBLK_PD_PAI:
 		regmap_set_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(17));
 		regmap_set_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(18));
 		break;
+	case IMX8MP_HDMIBLK_PD_PVI:
+		regmap_set_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(28));
+		regmap_set_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(22));
+		break;
 	case IMX8MP_HDMIBLK_PD_TRNG:
 		regmap_set_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(27) | BIT(30));
 		regmap_set_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(20));
@@ -329,20 +359,58 @@ static void imx8mp_hdmi_blk_ctrl_power_on(struct imx8mp_blk_ctrl *bc,
 	default:
 		break;
 	}
-
-	imx8mp_qos_set(domain);
-
 }
 
 static void imx8mp_hdmi_blk_ctrl_power_off(struct imx8mp_blk_ctrl *bc,
 					   struct imx8mp_blk_ctrl_domain *domain)
 {
 	switch (domain->id) {
+	case IMX8MP_HDMIBLK_PD_IRQSTEER:
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL0, BIT(9));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(16));
+		break;
+	case IMX8MP_HDMIBLK_PD_LCDIF:
+		regmap_clear_bits(bc->regmap, HDMI_RTX_RESET_CTL0,
+				  BIT(4) | BIT(5) | BIT(6));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(11));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL0,
+				  BIT(16) | BIT(17) | BIT(18) |
+				  BIT(19) | BIT(20));
+		break;
+	case IMX8MP_HDMIBLK_PD_PAI:
+		regmap_clear_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(18));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(17));
+		break;
+	case IMX8MP_HDMIBLK_PD_PVI:
+		regmap_clear_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(22));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(28));
+		break;
+	case IMX8MP_HDMIBLK_PD_TRNG:
+		regmap_clear_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(20));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(27) | BIT(30));
+		break;
 	case IMX8MP_HDMIBLK_PD_HDMI_TX:
 		regmap_clear_bits(bc->regmap, HDMI_TX_CONTROL0, BIT(1));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_RESET_CTL0,
+				  BIT(7) | BIT(10) | BIT(11));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL1,
+				  BIT(12) | BIT(13) | BIT(14) | BIT(15) | BIT(16) |
+				  BIT(18) | BIT(19) | BIT(20) | BIT(21));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL0,
+				  BIT(2) | BIT(4) | BIT(5));
 		break;
 	case IMX8MP_HDMIBLK_PD_HDMI_TX_PHY:
 		regmap_set_bits(bc->regmap, HDMI_TX_CONTROL0, BIT(3));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(12));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL0, BIT(7));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(22) | BIT(24));
+		break;
+	case IMX8MP_HDMIBLK_PD_HDCP:
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL0, BIT(11));
+		break;
+	case IMX8MP_HDMIBLK_PD_HRV:
+		regmap_clear_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(15));
+		regmap_clear_bits(bc->regmap, HDMI_RTX_CLK_CTL1, BIT(3) | BIT(4) | BIT(5));
 		break;
 	default:
 		break;
@@ -355,35 +423,22 @@ static int imx8mp_hdmi_power_notifier(struct notifier_block *nb,
 	struct imx8mp_blk_ctrl *bc = container_of(nb, struct imx8mp_blk_ctrl,
 						 power_nb);
 
-	if (action == IMX_GPCV2_NOTIFY_ON_CLK_ENABLED) {
-		regmap_write(bc->regmap, HDMI_RTX_RESET_CTL0, 0x0);
-		regmap_write(bc->regmap, HDMI_RTX_CLK_CTL0, 0xFFFFFFFF);
-		regmap_write(bc->regmap, HDMI_RTX_CLK_CTL1, 0x7ffff87e);
-
-		return NOTIFY_OK;
-	}
-
-	if (action == IMX_GPCV2_NOTIFY_ON_ADB400) {
-		/* wait for memory repair done */
-		udelay(20);
-
-		regmap_write(bc->regmap, HDMI_RTX_CLK_CTL0, 0);
-		regmap_write(bc->regmap, HDMI_RTX_CLK_CTL1, 0);
-		regmap_write(bc->regmap, HDMI_RTX_RESET_CTL0, 0xffffffff);
-		regmap_write(bc->regmap, HDMI_RTX_CLK_CTL0, 0xFFFFFFFF);
-		regmap_write(bc->regmap, HDMI_RTX_CLK_CTL1, 0x7ffff87e);
-
-		return NOTIFY_OK;
-	}
-
-	if (action == IMX_GPCV2_NOTIFY_OFF_ADB400) {
-		regmap_write(bc->regmap, HDMI_RTX_CLK_CTL0, 0);
-		regmap_write(bc->regmap, HDMI_RTX_CLK_CTL1, 0);
-	}
-
 	if (action != GENPD_NOTIFY_ON)
 		return NOTIFY_OK;
 
+	/*
+	 * Contrary to other blk-ctrls the reset and clock don't clear when the
+	 * power domain is powered down. To ensure the proper reset pulsing,
+	 * first clear them all to asserted state, then enable the bus clocks
+	 * and then release the ADB reset.
+	 */
+	regmap_write(bc->regmap, HDMI_RTX_RESET_CTL0, 0x0);
+	regmap_write(bc->regmap, HDMI_RTX_CLK_CTL0, 0x0);
+	regmap_write(bc->regmap, HDMI_RTX_CLK_CTL1, 0x0);
+	regmap_set_bits(bc->regmap, HDMI_RTX_CLK_CTL0,
+			BIT(0) | BIT(1) | BIT(10));
+	regmap_set_bits(bc->regmap, HDMI_RTX_RESET_CTL0, BIT(0));
+
 	/*
 	 * On power up we have no software backchannel to the GPC to
 	 * wait for the ADB handshake to happen, so we just delay for a
@@ -394,41 +449,6 @@ static int imx8mp_hdmi_power_notifier(struct notifier_block *nb,
 	return NOTIFY_OK;
 }
 
-#define IMX8MP_HDMIBLK_NOC_HRV		0
-#define IMX8MP_HDMIBLK_NOC_LCDIFHDMI	1
-#define IMX8MP_HDMIBLK_NOC_HDCP		2
-
-static const struct imx8mp_blk_ctrl_noc_data imx8mp_hdmi_noc_data[] = {
-	[IMX8MP_HDMIBLK_NOC_HRV] = {
-		.off = 0x600,
-		.priority = 0x80000202,
-		.extctrl = 1,
-	},
-	[IMX8MP_HDMIBLK_NOC_LCDIFHDMI] = {
-		.off = 0x680,
-		.priority = 0x80000202,
-		.extctrl = 1,
-	},
-	[IMX8MP_HDMIBLK_NOC_HDCP] = {
-		.off = 0x700,
-		.priority = 0x80000505,
-	}
-};
-
-#define IMX8MP_HDMIBLK_LCDIF	0
-#define IMX8MP_HDMIBLK_HRV	1
-
-static const struct imx8m_blk_ctrl_hurry_data imx8mp_hdmi_hurry_data[] = {
-	[IMX8MP_HDMIBLK_LCDIF] = {
-		.off = HDMI_TX_CONTROL0,
-		.hurry_mask = GENMASK(14, 12),
-	},
-	[IMX8MP_HDMIBLK_HRV] = {
-		.off = HDMI_TX_CONTROL0,
-		.hurry_mask = GENMASK(18, 16),
-	}
-};
-
 static const struct imx8mp_blk_ctrl_domain_data imx8mp_hdmi_domain_data[] = {
 	[IMX8MP_HDMIBLK_PD_IRQSTEER] = {
 		.name = "hdmiblk-irqsteer",
@@ -438,13 +458,11 @@ static const struct imx8mp_blk_ctrl_domain_data imx8mp_hdmi_domain_data[] = {
 	},
 	[IMX8MP_HDMIBLK_PD_LCDIF] = {
 		.name = "hdmiblk-lcdif",
-		.clk_names = (const char *[]){ "axi", "apb", "fdcc" },
-		.num_clks = 3,
+		.clk_names = (const char *[]){ "axi", "apb" },
+		.num_clks = 2,
 		.gpc_name = "lcdif",
-		.hurry_data = &imx8mp_hdmi_hurry_data[IMX8MP_HDMIBLK_LCDIF],
-		.noc_data = {
-			&imx8mp_hdmi_noc_data[IMX8MP_HDMIBLK_NOC_LCDIFHDMI],
-		},
+		.path_names = (const char *[]){"lcdif-hdmi"},
+		.num_paths = 1,
 	},
 	[IMX8MP_HDMIBLK_PD_PAI] = {
 		.name = "hdmiblk-pai",
@@ -466,8 +484,8 @@ static const struct imx8mp_blk_ctrl_domain_data imx8mp_hdmi_domain_data[] = {
 	},
 	[IMX8MP_HDMIBLK_PD_HDMI_TX] = {
 		.name = "hdmiblk-hdmi-tx",
-		.clk_names = (const char *[]){ "apb", "ref_266m", "fdcc" },
-		.num_clks = 3,
+		.clk_names = (const char *[]){ "apb", "ref_266m" },
+		.num_clks = 2,
 		.gpc_name = "hdmi-tx",
 	},
 	[IMX8MP_HDMIBLK_PD_HDMI_TX_PHY] = {
@@ -481,19 +499,16 @@ static const struct imx8mp_blk_ctrl_domain_data imx8mp_hdmi_domain_data[] = {
 		.clk_names = (const char *[]){ "axi", "apb" },
 		.num_clks = 2,
 		.gpc_name = "hrv",
-		.hurry_data = &imx8mp_hdmi_hurry_data[IMX8MP_HDMIBLK_HRV],
-		.noc_data = {
-			&imx8mp_hdmi_noc_data[IMX8MP_HDMIBLK_NOC_HRV],
-		},
+		.path_names = (const char *[]){"hrv"},
+		.num_paths = 1,
 	},
 	[IMX8MP_HDMIBLK_PD_HDCP] = {
 		.name = "hdmiblk-hdcp",
 		.clk_names = (const char *[]){ "axi", "apb" },
 		.num_clks = 2,
 		.gpc_name = "hdcp",
-		.noc_data = {
-			&imx8mp_hdmi_noc_data[IMX8MP_HDMIBLK_NOC_HDCP],
-		},
+		.path_names = (const char *[]){"hdcp"},
+		.num_paths = 1,
 	},
 };
 
@@ -537,6 +552,10 @@ static int imx8mp_blk_ctrl_power_on(struct generic_pm_domain *genpd)
 		goto clk_disable;
 	}
 
+	ret = icc_bulk_set_bw(domain->num_paths, domain->paths);
+	if (ret)
+		dev_err(bc->dev, "failed to set icc bw\n");
+
 	clk_bulk_disable_unprepare(data->num_clks, domain->clks);
 
 	return 0;
@@ -583,7 +602,6 @@ static int imx8mp_blk_ctrl_probe(struct platform_device *pdev)
 	const struct imx8mp_blk_ctrl_data *bc_data;
 	struct device *dev = &pdev->dev;
 	struct imx8mp_blk_ctrl *bc;
-	struct regmap *regmap;
 	void __iomem *base;
 	int num_domains, i, ret;
 
@@ -591,7 +609,6 @@ static int imx8mp_blk_ctrl_probe(struct platform_device *pdev)
 		.reg_bits	= 32,
 		.val_bits	= 32,
 		.reg_stride	= 4,
-		.disable_debugfs = true,
 	};
 
 	bc = devm_kzalloc(dev, sizeof(*bc), GFP_KERNEL);
@@ -626,7 +643,7 @@ static int imx8mp_blk_ctrl_probe(struct platform_device *pdev)
 	if (!bc->onecell_data.domains)
 		return -ENOMEM;
 
-	bc->bus_power_dev = genpd_dev_pm_attach_by_name(dev, "bus");
+	bc->bus_power_dev = dev_pm_domain_attach_by_name(dev, "bus");
 	if (IS_ERR(bc->bus_power_dev))
 		return dev_err_probe(dev, PTR_ERR(bc->bus_power_dev),
 				     "failed to attach bus power domain\n");
@@ -634,20 +651,35 @@ static int imx8mp_blk_ctrl_probe(struct platform_device *pdev)
 	bc->power_off = bc_data->power_off;
 	bc->power_on = bc_data->power_on;
 
-	regmap = syscon_regmap_lookup_by_compatible("fsl,imx8m-noc");
-	if (!IS_ERR(regmap))
-		bc->noc_regmap = regmap;
-
 	for (i = 0; i < num_domains; i++) {
 		const struct imx8mp_blk_ctrl_domain_data *data = &bc_data->domains[i];
 		struct imx8mp_blk_ctrl_domain *domain = &bc->domains[i];
 		int j;
 
 		domain->data = data;
+		domain->num_paths = data->num_paths;
 
 		for (j = 0; j < data->num_clks; j++)
 			domain->clks[j].id = data->clk_names[j];
 
+		for (j = 0; j < data->num_paths; j++) {
+			domain->paths[j].name = data->path_names[j];
+			/* Fake value for now, just let ICC could configure NoC mode/priority */
+			domain->paths[j].avg_bw = 1;
+			domain->paths[j].peak_bw = 1;
+		}
+
+		ret = devm_of_icc_bulk_get(dev, data->num_paths, domain->paths);
+		if (ret) {
+			if (ret != -EPROBE_DEFER) {
+				dev_warn_once(dev, "Could not get interconnect paths, NoC will stay unconfigured!\n");
+				domain->num_paths = 0;
+			} else {
+				dev_err_probe(dev, ret, "failed to get noc entries\n");
+				goto cleanup_pds;
+			}
+		}
+
 		ret = devm_clk_bulk_get(dev, data->num_clks, domain->clks);
 		if (ret) {
 			dev_err_probe(dev, ret, "failed to get clock\n");
@@ -667,7 +699,6 @@ static int imx8mp_blk_ctrl_probe(struct platform_device *pdev)
 		domain->genpd.name = data->name;
 		domain->genpd.power_on = imx8mp_blk_ctrl_power_on;
 		domain->genpd.power_off = imx8mp_blk_ctrl_power_off;
-		domain->genpd.flags = data->flags;
 		domain->bc = bc;
 		domain->id = i;
 
@@ -692,9 +723,6 @@ static int imx8mp_blk_ctrl_probe(struct platform_device *pdev)
 				  &blk_ctrl_genpd_lock_class);
 
 		bc->onecell_data.domains[i] = &domain->genpd;
-
-		if (data->flags & GENPD_FLAG_ACTIVE_WAKEUP)
-			device_set_wakeup_capable(domain->power_dev, true);
 	}
 
 	ret = of_genpd_add_provider_onecell(dev->of_node, &bc->onecell_data);
@@ -710,6 +738,12 @@ static int imx8mp_blk_ctrl_probe(struct platform_device *pdev)
 		goto cleanup_provider;
 	}
 
+	if (bc_data->probe) {
+		ret = bc_data->probe(bc);
+		if (ret)
+			goto cleanup_provider;
+	}
+
 	dev_set_drvdata(dev, bc);
 
 	return 0;
@@ -819,7 +853,7 @@ static const struct of_device_id imx8mp_blk_ctrl_of_match[] = {
 		/* Sentinel */
 	}
 };
-MODULE_DEVICE_TABLE(of, imx8m_blk_ctrl_of_match);
+MODULE_DEVICE_TABLE(of, imx8mp_blk_ctrl_of_match);
 
 static struct platform_driver imx8mp_blk_ctrl_driver = {
 	.probe = imx8mp_blk_ctrl_probe,
@@ -831,3 +865,4 @@ static struct platform_driver imx8mp_blk_ctrl_driver = {
 	},
 };
 module_platform_driver(imx8mp_blk_ctrl_driver);
+MODULE_LICENSE("GPL");
